<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Noelle Mu | SRE | Open Source</title>
  
  <subtitle>Noelle Mu&#39;s talking here.</subtitle>
  <link href="http://site.noellemu.cloud/atom.xml" rel="self"/>
  
  <link href="http://site.noellemu.cloud/"/>
  <updated>2022-11-24T14:55:34.697Z</updated>
  <id>http://site.noellemu.cloud/</id>
  
  <author>
    <name>Noelle Mu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 语言中空结构体 struct{} 的作用</title>
    <link href="http://site.noellemu.cloud/0c4bcffb0ac5/"/>
    <id>http://site.noellemu.cloud/0c4bcffb0ac5/</id>
    <published>2022-11-24T04:26:17.000Z</published>
    <updated>2022-11-24T14:55:34.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="struct-的特性"><a href="#struct-的特性" class="headerlink" title="struct{} 的特性"></a>struct{} 的特性</h2><p>在 Go 的源代码中，对 <code>struct&#123;&#125;</code> 的内存申请都会返回一个固定的内存地址，这说明 <code>struct&#123;&#125;</code> 是不占用内存空间的，同样不占用内存空间的还有 <code>[]struct&#123;&#125;</code> 等。</p><p>对 <code>struct&#123;&#125;</code> 调用 <code>unsafe.Sizeof()</code> 得到的结果也是 0。</p><h2 id="配合-map-构造-set"><a href="#配合-map-构造-set" class="headerlink" title="配合 map 构造 set"></a>配合 map 构造 set</h2><p>Go 语言是没有自带 <code>set</code> 这种数据结构的，但可以使用 <code>map</code> 配合 <code>struct&#123;&#125;</code> 构造 <code>set</code>，比使用 <code>bool</code> 每条数据可以节省一个字节的空间：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造一个 string 类型的 set</span></span><br><span class="line">set := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 向 set 中添加元素</span></span><br><span class="line">set[<span class="string">&quot;a&quot;</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="comment">// 判断一个元素（key）是否在 set 中</span></span><br><span class="line"><span class="keyword">if</span> _, ok := set[key]; ok &#123;</span><br><span class="line">    <span class="comment">// 存在</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不存在</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历 set</span></span><br><span class="line"><span class="keyword">for</span> key := <span class="keyword">range</span> set &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作为方法的-receiver"><a href="#作为方法的-receiver" class="headerlink" title="作为方法的 receiver"></a>作为方法的 receiver</h2><p>这种写法比较少见（我在项目中其实还是见过的，只是比较少），但是不会报错：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CalcService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s XxxService)</span></span> Add(a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s XxxService)</span></span> Mul(a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作为-channel-的类型"><a href="#作为-channel-的类型" class="headerlink" title="作为 channel 的类型"></a>作为 channel 的类型</h2><p>有的时候我们声明一个 <code>channel</code> 并不需要它发送数据，而是进行 <code>goroutine</code> 之间的调度、控制 <code>goroutine</code> 的个数等，这时候就可以声明一个 <code>struct&#123;&#125;</code> 类型的 <code>channel</code>。</p><p>例如以下是一个使用 <code>chan struct&#123;&#125;</code> 进行 <code>goroutine</code> 调度，使得两个 <code>goroutine</code> 交替输出 1 - 100 的例子（经典面试题）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    i      = <span class="number">1</span></span><br><span class="line">    chOdd  = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    chEven = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    wg     = sync.WaitGroup&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出奇数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">odd</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        &lt;-chOdd</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine1:&quot;</span>, i)</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">100</span> &#123;</span><br><span class="line">            chEven &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        chEven &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出偶数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">even</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        &lt;-chEven</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine2:&quot;</span>, i)</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">101</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        chOdd &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> odd()</span><br><span class="line">    <span class="keyword">go</span> even()</span><br><span class="line">    chOdd &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;struct-的特性&quot;&gt;&lt;a href=&quot;#struct-的特性&quot; class=&quot;headerlink&quot; title=&quot;struct{} 的特性&quot;&gt;&lt;/a&gt;struct{} 的特性&lt;/h2&gt;&lt;p&gt;在 Go 的源代码中，对 &lt;code&gt;struct&amp;#123;&amp;#1</summary>
      
    
    
    
    
    <category term="Golang" scheme="http://site.noellemu.cloud/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>【Metropolitan 本纪】01-为什么要重复造轮子？</title>
    <link href="http://site.noellemu.cloud/c1fcc409ee4c/"/>
    <id>http://site.noellemu.cloud/c1fcc409ee4c/</id>
    <published>2022-11-12T17:50:01.000Z</published>
    <updated>2022-11-21T16:39:12.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1863 年 1 月，一列由蒸汽机车牵引的木质车厢驶向了伦敦的地下，这宣告着世界上的第一条地铁—— <strong>大都会地铁（Metropolitan Railway）</strong> 就此诞生。</p></blockquote><h2 id="Metropolitan-是什么？"><a href="#Metropolitan-是什么？" class="headerlink" title="Metropolitan 是什么？"></a>Metropolitan 是什么？</h2><p><code>Metropolitan</code> 是一个开源运维自动化平台，其灵感来源于 <a href="https://github.com/ansible/ansible">Ansible</a> 和 <a href="https://github.com/Tencent/bk-job">蓝鲸作业平台</a>，支持一键对上万台服务器进行脚本执行、文件分发、定时任务等操作，用户除了使用 <code>Metropolitan</code> 提供的这些标准操作之外，还可以根据业务需要定义自己的操作类型（如添加监控、屏蔽监控告警、调用第三方系统等）。<code>Metropolitan</code> 还支持将这些操作按步骤编排为一个自动化的任务并通过 <code>API</code> 进行调用，实现运维自动化，降低运维成本。</p><h2 id="Metropolitan-的功能？"><a href="#Metropolitan-的功能？" class="headerlink" title="Metropolitan 的功能？"></a>Metropolitan 的功能？</h2><p><code>Metropolitan</code> 具有蓝鲸作业平台拥有的几乎所有功能，同时也抛弃了一些不具备通用性的功能（例如和蓝鲸运维体系下其他系统强耦合的功能等），添加了一些新的功能（如自定义的操作类型、服务发现功能等），并大大增强了通用性和可扩展性，且在架构方面更加轻量，更便于小规模业务使用和企业内部根据自己的业务需要进行二次开发。</p><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><p>类似于蓝鲸作业平台的“快速执行”功能，对脚本执行、文件分发和某些用户配置的自定义操作类型提供轻量级的、便捷的一次性操作入口。</p><h3 id="任务编排"><a href="#任务编排" class="headerlink" title="任务编排"></a>任务编排</h3><p>类似于蓝鲸作业平台的“任务编排”功能，可以按照用户需要将各项操作（Operation）组装成一个可以单独运行的“任务（Task）”，便于按需调用。</p><h3 id="任务执行（Metropolitan-Executor）"><a href="#任务执行（Metropolitan-Executor）" class="headerlink" title="任务执行（Metropolitan-Executor）"></a>任务执行（Metropolitan-Executor）</h3><p>是一个轻量级的、独立启动的进程，用于执行任务或快捷操作并收集其执行结果，同时还能管理执行产生的日志等信息。</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>类似于蓝鲸作业平台的“定时执行”功能，可以实现任务的周期执行和单次定时执行。对于周期执行的任务，可通过图形化的方式或 <code>Linux</code> 的 <code>cron</code> 表达式指定某个任务的执行时间。</p><h3 id="通知管理"><a href="#通知管理" class="headerlink" title="通知管理"></a>通知管理</h3><p>类似于蓝鲸作业平台的“消息通知”功能，可配置权限与通知事件的对应关系，也可将用户分组并提供按组通知的功能，并在任务执行失败、定时任务执行失败、定时任务开始执行前等需要通知的场景对用户进行通知，同时会保留完整的通知日志，便于用户进行查看。</p><h3 id="服务发现（Metropolitan-Discovery）"><a href="#服务发现（Metropolitan-Discovery）" class="headerlink" title="服务发现（Metropolitan-Discovery）"></a>服务发现（Metropolitan-Discovery）</h3><p>类似于“蓝鲸节点管理平台”，是一个独立启动的进程，可以对 <code>Agent</code> 和 <code>Proxy</code> 进行管理和查看，也可配置 <code>Agent</code> 和 <code>Proxy</code> 的发现方式并对其进行健康检查等操作。<code>Metropolitan-Discovery</code> 严格来说是一个为 <code>Metropolitan</code> 等平台服务的通用组件，所以拥有自己单独的前端界面。</p><h3 id="基于-RBAC-的用户管理功能"><a href="#基于-RBAC-的用户管理功能" class="headerlink" title="基于 RBAC 的用户管理功能"></a>基于 RBAC 的用户管理功能</h3><p><code>Metropolitan</code> 默认提供了基于 <code>RBAC</code> 的用户管理功能，可将用户与服务器账号和 <code>Metropolitan</code> 的各项功能关联起来，可实现大部分用户的需求，同时也支持用户根据自己的需要接入自己的权限管理系统。</p><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>Metropolitan 的架构图如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32771015/1668273853403-eddd08ae-6e9c-4c3a-8dac-534cbf586ac6.png#averageHue=%23f7f4f1&clientId=u00a1dc89-6a3b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=348&id=u34be980e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=522&originWidth=1137&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34263&status=done&style=none&taskId=u2d1031fa-c94a-480d-bb70-666deb227c2&title=&width=758" alt="Metropolitan 架构图"></p><p><code>Metropolitan</code> 是基于 <code>Go 语言</code> 和 <code>TypeScript</code> 编写的，采用前后端分离的设计方式和端口-适配器模式（六边形架构），具有超强的扩展性，便于企业根据自己的业务需要进行二次开发。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>基于 <code>React.js</code> 和 <code>Ant Design Pro</code>，采用 <code>TypeScript</code> 开发。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>使用 <code>Golang</code> 开发，整体基于端口-适配器模式（六边形架构）设计，除了 <code>Metropolitan-Discovery</code>（由于通用性强而拆分） 和 <code>Metropolitan-Executor</code>（由于并发量大、性能要求高而拆分）外，其余部分（统称为 <code>Metropolitan-Core</code>）为单体架构，并且是无状态的，可以满足多点部署的需求。<code>Metropolitan-Discovery</code>、<code>Metropolitan-Executor</code> 和 <code>Metropolitan-Core</code> 之间通过 <code>rpcx</code>（默认）、<code>HTTP</code> 和其他可扩展的方式进行通信。</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li><code>etcd</code>：提供分布式锁服务的同时作为服务注册与发现中心，使得 <code>Metropolitan-Core</code> 与 <code>Metropolitan-Executor</code> 之间可以相互进行服务发现。</li><li><code>MongoDB</code>：<code>Metropolitan</code> 的主数据库，保存 <code>Metropolitan</code> 所需的几乎全部数据（注：不用 <code>MySQL</code> 是为了满足一些结构无法确定的数据的存储需求，如用户自定义的操作类型步骤等）。</li><li><code>Kafka</code>（可选）：消息队列，传递系统中的心跳检测、任务执行状态切换等 <code>CloudEvents</code> 事件等，并传递任务执行过程中产生的日志等信息。</li><li><code>Redis</code>（可选）：缓存服务，负责缓存任务执行过程中的主机和状态等信息，提高系统的并发能力。</li><li><code>ElasticSearch</code>：日志数据库，负责保存任务执行中产生的日志信息。</li><li><code>MinIO</code>：默认的文件存储服务，负责保存用户上传的文件和导出的日志文件等。</li></ul><h2 id="Metropolitan-的特色功能"><a href="#Metropolitan-的特色功能" class="headerlink" title="Metropolitan 的特色功能"></a>Metropolitan 的特色功能</h2><p>蓝鲸作业平台所具有的那些功能就不再提了，以下是 <code>Metropolitan</code> 目前规划的一些“人无我有”的特色功能。</p><h3 id="自定义的操作类型（Operation）"><a href="#自定义的操作类型（Operation）" class="headerlink" title="自定义的操作类型（Operation）"></a>自定义的操作类型（Operation）</h3><p>由于 <code>Metropolitan</code> 的操作类型 <code>Operation</code> 是可扩展的，因此用户可以根据自己的需要来开发可插拔的自定义操作类型——例如调用第三方系统、操作 <code>K8s</code>、调用 <code>GitLab</code> 等，并将其作为步骤或快捷操作中的执行实体使用，以此来扩展 <code>Metropolitan</code> 的能力。</p><h3 id="自定义的脚本语言类型（ScriptType）"><a href="#自定义的脚本语言类型（ScriptType）" class="headerlink" title="自定义的脚本语言类型（ScriptType）"></a>自定义的脚本语言类型（ScriptType）</h3><p><code>Metropolitan</code> 默认提供了 <code>Shell</code> 和 <code>Python</code> 两种脚本语言作为脚本执行的内容，但用户可根据自己的需要来扩展所需的脚本语言，如 <code>PowerShell</code> 等（甚至是非脚本语言——如 <code>Golang</code> 等），只需要在 <code>Agent</code> 上扩展实现对应脚本语言的编译等操作并在 <code>Agent</code> 所在的机器上安装对应语言的执行环境即可。</p><h3 id="自定义的接入层（API）"><a href="#自定义的接入层（API）" class="headerlink" title="自定义的接入层（API）"></a>自定义的接入层（API）</h3><p><code>Metropolitan</code> 默认提供了 <code>HTTP</code> 与 <code>rpcx</code> 两种协议的接口，用户可根据需要实现其他协议的接口，如 <code>gRPC</code> 等。</p><h3 id="Client-SDK（Metropolitan-Cli）"><a href="#Client-SDK（Metropolitan-Cli）" class="headerlink" title="Client SDK（Metropolitan-Cli）"></a>Client SDK（Metropolitan-Cli）</h3><p>默认提供 <code>Go</code> 语言的 <code>Client SDK</code>，通过 <code>rpcx</code> 的方式与 <code>Metropolitan</code> 进行交互，便于用户在第三方系统中对接 <code>Metropolitan</code>，增强 <code>Metropolitan</code> 的自动化能力。</p><h3 id="自定义的执行目标来源管理（ExecuteTarget）"><a href="#自定义的执行目标来源管理（ExecuteTarget）" class="headerlink" title="自定义的执行目标来源管理（ExecuteTarget）"></a>自定义的执行目标来源管理（ExecuteTarget）</h3><p>默认通过 <code>Metropolitan-Discovery</code> 形成可用的目标服务器列表并通过每个 <code>Agent</code> 的 <code>uuid</code> 区分不同的执行目标，用户也可以通过二次开发来接入自己的 <code>CMDB</code> 等第三方系统实现灵活的执行目标来源管理功能，甚至可以实现按节点、集群等方式批量选择执行目标，只需实现 <code>GetExecuteTargets()</code> 方法即可。</p><h3 id="系统配置管理（CustomConfig）"><a href="#系统配置管理（CustomConfig）" class="headerlink" title="系统配置管理（CustomConfig）"></a>系统配置管理（CustomConfig）</h3><p>一个可以提供自定义 <code>JSON</code> 格式的配置管理的小功能，便于用户在二次开发时将一些必需的数据保存在 <code>Metropolitan</code> 中（例如第三方系统的地址等）。</p><h2 id="为什么要重复造轮子？"><a href="#为什么要重复造轮子？" class="headerlink" title="为什么要重复造轮子？"></a>为什么要重复造轮子？</h2><p>你可能要问了：既然有了蓝鲸作业平台，那为什么又要重复造轮子呢？除了上述那些特色功能之外，还有以下两个原因：</p><h3 id="更轻量"><a href="#更轻量" class="headerlink" title="更轻量"></a>更轻量</h3><p>相比于微服务架构的蓝鲸作业平台，单体架构的 <code>Metropolitan</code> 显然更轻量，虽然有 <code>Metropolitan-Discovery</code> 和 <code>Metropolitan-Executor</code> 这两个独立启动的进程，但是进程数量也比蓝鲸作业平台少得多；同时，<code>Metropolitan</code> 是使用 <code>Golang</code> 编写的，相比基于 <code>Java</code> 和 <code>Spring Cloud</code> 的蓝鲸作业平台在运行时占用的资源少得多，部署更加简便，在业务规模较小时也不会造成太大的资源压力。</p><h3 id="扩展性更强"><a href="#扩展性更强" class="headerlink" title="扩展性更强"></a>扩展性更强</h3><p><code>Metropolitan</code> 是作为开源项目而不是商业项目诞生的，所以对扩展性和二次开发的能力格外重视。由于六边形架构天然具有更强的可扩展性，架构方面的优势赋予了 <code>Metropolitan</code> 强大的扩展能力——几乎什么都可以扩展，可以完美满足用户各种各样的二次开发需求，同时还提供了 <code>Client SDK</code>，便于用户将 <code>Metropolitan</code> 与现有系统对接。</p><h3 id="松耦合"><a href="#松耦合" class="headerlink" title="松耦合"></a>松耦合</h3><p><code>Metropolitan</code> 的定位是一个可以独立使用的项目，它的运行不依赖于其他任何第三方系统，相比蓝鲸作业平台有着更好的兼容性和泛用性。</p><p>此外，<code>Metropolitan</code> 诞生的意义并不是取代蓝鲸作业平台。蓝鲸作业平台其实只是 <code>Metropolitan</code> 的灵感来源之一，而 <code>Metropolitan</code> 完全是一个独立的开源项目。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>“我最擅长的事情并不是凭空想出一个不存在的东西，而是优化现有的东西。”</p><p>作为《Metropolitan 本纪》系列的第一篇，这篇文章也标示着 Metropolitan 项目的开始，希望 Metropolitan 可以被更多的人所认可，最终为 SRE 行业贡献出自己的力量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;1863 年 1 月，一列由蒸汽机车牵引的木质车厢驶向了伦敦的地下，这宣告着世界上的第一条地铁—— &lt;strong&gt;大都会地铁（Metropolitan Railway）&lt;/strong&gt; 就此诞生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i</summary>
      
    
    
    
    <category term="Metropolitan" scheme="http://site.noellemu.cloud/categories/Metropolitan/"/>
    
    <category term="Open Source" scheme="http://site.noellemu.cloud/categories/Metropolitan/Open-Source/"/>
    
    
    <category term="Metropolitan" scheme="http://site.noellemu.cloud/tags/Metropolitan/"/>
    
    <category term="Open Source" scheme="http://site.noellemu.cloud/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>Windows PowerShell 开启命令历史提示</title>
    <link href="http://site.noellemu.cloud/47f7895de753/"/>
    <id>http://site.noellemu.cloud/47f7895de753/</id>
    <published>2022-11-10T05:20:04.000Z</published>
    <updated>2022-11-21T16:39:12.367Z</updated>
    
    <content type="html"><![CDATA[<p>先看配置效果：</p><p><img src="https://cdn.jsdelivr.net/gh/noellemu/pictures/img/20221110133002.png" alt="配置效果"></p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>如果你在 Google 上搜索“Windows Powershell 开启命令历史提示”，你会搜到一条这样的命令：<code>Set-PSReadlineOption -PredictionSource History</code>，但是这条命令并不是所有人都能直接执行的，例如我，执行这条命令之后会报“Invalid Argument”错误。</p><p>出现错误的原因可以参考 <a href="https://github.com/PowerShell/PSReadLine/issues/3117">这个 Issue</a>，简单来说就是系统自带的 <code>Set-PSReadLineOption</code> 版本太低，不支持 <code>-PredictionSource</code> 参数，所以我们需要升级 <code>PSReadLine</code>。从官方文档中可以查到升级的命令为 <code>Install-Module PSReadLine -Force -SkipPublisherCheck -AllowPrerelease</code>，但这条命令也是不可以直接执行的，所以我们需要先升级 <code>PowerShellGet</code>，然后再升级 <code>PSReadLine</code>。</p><h2 id="升级-PowerShellGet"><a href="#升级-PowerShellGet" class="headerlink" title="升级 PowerShellGet"></a>升级 PowerShellGet</h2><p>用管理员权限打开 <code>Windows PowerShell</code>，执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PowerShellGet <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><h2 id="升级-PSReadLine-并配置命令历史提示功能"><a href="#升级-PSReadLine-并配置命令历史提示功能" class="headerlink" title="升级 PSReadLine 并配置命令历史提示功能"></a>升级 PSReadLine 并配置命令历史提示功能</h2><p>然后升级 <code>PSReadLine</code>，这条命令不需要管理员权限：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> PSReadLine <span class="literal">-Force</span> <span class="literal">-SkipPublisherCheck</span> <span class="literal">-AllowPrerelease</span></span><br></pre></td></tr></table></figure><p>升级完成后，编辑配置文件，配置历史提示功能：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="variable">$Profile</span></span><br><span class="line"><span class="comment"># 开启命令历史提示，并设置样式为文章开头图片中的列表样式</span></span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-ShowToolTips</span> <span class="literal">-PredictionSource</span> <span class="built_in">History</span></span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-PredictionViewStyle</span> ListView</span><br></pre></td></tr></table></figure><p>最后重新打开 <code>PowerShell</code>，此时输入命令就可以看到历史提示了，并且可以使用上下方向键选择想要执行的命令，可以愉快地玩耍了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先看配置效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/noellemu/pictures/img/20221110133002.png&quot; alt=&quot;配置效果&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题</summary>
      
    
    
    
    <category term="Windows" scheme="http://site.noellemu.cloud/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://site.noellemu.cloud/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>go mod 常用技巧总结</title>
    <link href="http://site.noellemu.cloud/9a024baca258/"/>
    <id>http://site.noellemu.cloud/9a024baca258/</id>
    <published>2022-11-09T02:22:00.000Z</published>
    <updated>2022-11-21T16:39:12.368Z</updated>
    
    <content type="html"><![CDATA[<p><del>遇事不决 go mod tidy</del></p><h2 id="go-mod-指定分支"><a href="#go-mod-指定分支" class="headerlink" title="go mod 指定分支"></a>go mod 指定分支</h2><p><code>go get</code> git 地址@分支名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/xxxx/xxx@branch</span><br></pre></td></tr></table></figure><h2 id="go-mod-replace-将远程包替换为本地包"><a href="#go-mod-replace-将远程包替换为本地包" class="headerlink" title="go mod replace 将远程包替换为本地包"></a>go mod replace 将远程包替换为本地包</h2><p>将远程包 <code>github.com/noellemu/api</code> 替换为本地包（支持绝对路径和相对路径）时，<code>go.mod</code> 的写法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">replace github.com/noellemu/api =&gt; ../api</span><br><span class="line">require (</span><br><span class="line">    github.com/noellemu/api v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后 <code>go mod tidy</code> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;del&gt;遇事不决 go mod tidy&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;go-mod-指定分支&quot;&gt;&lt;a href=&quot;#go-mod-指定分支&quot; class=&quot;headerlink&quot; title=&quot;go mod 指定分支&quot;&gt;&lt;/a&gt;go mod 指定分支&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="Go" scheme="http://site.noellemu.cloud/categories/Go/"/>
    
    
    <category term="Go" scheme="http://site.noellemu.cloud/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>新的个人网站上线了，来聊些杂七杂八的话题吧</title>
    <link href="http://site.noellemu.cloud/709bf6a98eb1/"/>
    <id>http://site.noellemu.cloud/709bf6a98eb1/</id>
    <published>2022-11-06T09:43:31.000Z</published>
    <updated>2022-11-07T13:50:41.092Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Be pragmatic and stay humble.</p><p>实事求是，谦虚谨慎。</p></blockquote><p><strong>注意：此文可能引起某些人的不适。若您在阅读中感受到自己的权益受到了侵犯，请及时退出。另外，你当然有选择抬杠的权利，但你杠就是你对。</strong></p><h2 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h2><p>2022 年 8 月 1 日，我终于签下了人生中第一份劳动合同，这代表着我的人生进入了一个全新的阶段——我终于彻底结束了 4 年压抑得喘不过气的大学生涯，获得了属于自己的自由，4 年来头一次感到自己终于做了一回人。</p><p>那么获得自由之后第一件事是什么呢？当然是清理门户，换马甲、换域名、换掉以前的一切……所以就有了现在你们看到的这个网站。</p><p>四年前的我如果知道现在的我做的是一份什么样的工作，一定会满腹疑问——毕竟我在跟周围的人说我的工作叫做 SRE 的时候，他们的下一句话不约而同地都是：“SRE 是什么？”，而且彼时的我还对 “Web 安全是一种极其需要天赋的领域，而我却又恰恰没有那种天赋”这个事实一无所知，还妄想着能在安全行业内闯出一番天地。</p><p>在被“我做安全是事倍功半的行为”这样的事实教育了之后，我开始寻找新的出路，无意间就接触到了 Java 后端开发。我像是捡到宝了一样，没日没夜地学习 Java、Spring、MySQL 还有各种各样的中间件，不到半年就已经能独立开发一些小型的项目了，也因此获得了人生中第一个实习机会。该说是年少无知还是与其他人跌倒在了同一个地方，我在学习了 Spring Cloud 之后被微服务迷得魂魄出窍，坚信“微服务就是银弹”，于是就开始用 Spring Cloud 开发一个比赛用的项目，还想要部署到 K8s，结果因为 Spring Cloud 这种胖客户端的微服务开发框架与 K8s 天生八字不合，最终也没弄出个所以然来。微服务的优点没感觉到，坑倒是一个不落地踩了个遍，直到现在想起来还是要大喊一句：“微服务把我坑了！”</p><p>机缘巧合之下，我了解到了 Service Mesh 和 Istio，也打开了潘多拉的魔盒——云原生 （Cloud Native）。在了解了这种神奇的技术体系之后，我猛然间感到我好像抓住了此生最重要的东西，在了解云原生的过程中也发现 Java 实在是太啰嗦了，不够极简主义，而云原生领域常用的语言 Golang 则更适合我这种极简主义者和实用主义者，于是我果断地抛弃了 Java 并且转向 Golang，用 Golang 完成了很多门课程的实验和大作业，也用 Golang 完成了一个至今仍在运行的外包项目。</p><p>但也是在此时，秋招迫在眉睫，我却发现云原生领域的工作如 K8s 开发、Service Mesh 开发等由于专业性太强而几乎完全不校招，于是把目光投向了类似的工作——SRE。在认真了解了 SRE 并拜读了 Google 关于 SRE 的两本著作之后，我发现这其实是一份非常适合我的工作：非常实用主义、成就感强烈、比业务开发更加底层、CRUD 的比重小、符合我个人的技术栈、可以应用新技术……于是我便将 SRE 作为目标岗位之一，最终也成功拿到了 Offer、有了现在的这份工作。</p><p>新生活就这样开始了，做着自己最喜欢的工作并能以此谋生，或许是这世界上最幸福的事情之一了吧。</p><h2 id="关于实用主义"><a href="#关于实用主义" class="headerlink" title="关于实用主义"></a>关于实用主义</h2><p>“空谈误国，实干兴邦”，这是我们每个人都无比熟悉的一句话，可是直到现在，我才深刻地体会到这句话的重量。</p><p>在耽误了我 4 年时间的那所大学的计算机学院里，实用主义是四等公民，所有的一切都在朝着“实践是技校学生才会去做的事情，我们不能干那种自降身份的事情”、“算法高级，你们所有人都要去做算法”、“做东西就要做炫酷的、没人见过的，对现有事物的改造与优化是愚蠢的行为”这样的方向演进。且不说这些话中饱含着偏见与歧视，对“绝大多数计算机专业的本科毕业生的第一份工作都是软件开发”这样的现状也毫无认知，更透露着一种由愚昧无知带来的傲慢。于是，在这样的大环境下，无数的二极管、键盘侠、人上人一个接一个地涌现出来，明明自己没多少能耐，却总以为自己是世界的中心，殊不知人外有人、山外有山，通用能力和专业能力没怎么培养出来，优越感却已经满级了。连实际工作中每天都会遇到的那些基本的技术问题都回答不出来，却高喊着“学术人高于打工人”，或者以为自己的技术实力世界最强而毫不掩饰对自认为“菜”的那些人的不屑，这样的人 4 年来我遇见了太多太多，对这样的现状也早已习以为常了。</p><p>是的，我曾经也是那样的人。我曾经认为自己的技术实力无人能敌，也曾认为培养通用实力是极其耽误时间的事情。但是直到参加工作的那一刻，我才发现通用实力的重要性，也发现脚踏实地的人能在这个绝大多数人都在空谈梦想的时代中获得巨大的红利。说到底，学历不过只是能力的一种罢了，没有学历或许会让一个通用能力十分强大的人错失许多机会，但一个人若只有学历而没有其他任何通用能力，那他在离开象牙塔之后如何在社会上生存都是问题。</p><p>对像你我这样的普通人来说，成长其实就是逐步接受现实、接受自己的平凡的过程。小时候，我们每个人都想成为救世主；后来，在成长的过程中，我们渐渐发现连做自己的救世主都很难，更别提改变世界了；最后我们恍然醒悟——人能做到的事情其实很少，我们能做到的对自己最有利的事情就是接受现实、适应现实，然后找到在这种现状下最佳的生存方法。</p><p>我曾经也是一名梦想家，整日沉迷于幻想无法自拔，在现实中一遇到什么不如意就立刻逃到幻想的世界中。在现实中我只是沧海中普通得不能再普通的一粟，但在幻想的世界中我却是造物主，掌握着生杀大权，看谁不顺眼就能在幻想的世界中让他永世不得安息。或许你想说“这样不是也挺好的吗”，但是，在上海这座拥有八千多家咖啡馆、有着各种各样的文化、充满了机遇与挑战的城市中的 8 个月（截至本文写作时）的工作和生活经验让我慢慢意识到：幻想除了消耗精神能量外，对自己的生活没有任何好处，它不仅会让你看起来像一个疯癫的傻子、一个另类的自大狂，更会阻碍你去做真正应该做的事情，最终毁掉你的一生。</p><p>梦想还是要有的，星空还是要仰望的，可是一步一个脚印地走好脚下的路，才是在这个时代下的我们真正应该做的事情。</p><p>所以，成为一名脚踏实地的实用主义者，是我今年最大的愿望。为此，我每天都在与伴随了我 22 年的幻想能力战斗——由于我此前一直用各种各样的借口纵容我的幻想，导致它已经成为了一种我难以控制的本能，与它正面对抗不会有任何好结果，只能通过拼命工作和发展各种各样的爱好（例如读书、数码、咖啡、探店、开源项目、公路旅行、轨道交通等）等方式慢慢夺取它所需要的时间和精神能量等资源并将它饿死。除此之外，别无他法。</p><p>因此，我将自己的座右铭定为“Be pragmatic and stay humble”，即“实事求是，谦虚谨慎”，也就是你们在点进这个网站时看到的最醒目的那一句话。同时，我也希望我所写下的文字也能帮到在迷茫中徘徊的你。万事开头难，“说干就干”其实能解决我们遇到的大多数问题。</p><h2 id="在路上"><a href="#在路上" class="headerlink" title="在路上"></a>在路上</h2><p>经常有人认为像我这样的轨道交通迷是一个奇怪的、难以理解的群体。但其实，运转和公路旅行一样，都是一种不以到达某地为目的而是享受“到达”的过程或是“到达”的方式的生活哲学，只不过道路不是公路而是铁路，交通工具不是汽车，而是地铁和火车。</p><p>我常常觉得坐在某种交通工具上奔向某个未知的目的地时，总是能想明白很多事情。同样地，在周末坐在路边一家小小的咖啡馆里品味着一杯咖啡时，灵感也总是不断地从脑海中涌现。或许人这一生的某些重大转折点并不是在工作或者学习中产生的，而是偶然间想明白了某些事情或让自己的某些逻辑形成了闭环。</p><p>其实人生也是一种像公路旅行或是运转一样在路上前进的过程，区别是我们不知道自己将会去向何处。因此，定下某一阶段的目的地并朝着它前进、享受在路上的过程才是这个过程中最重要的事情。不知道有多少人是想明白了这一点才成为实用主义者的，但我是其中的一员——毕竟，当你乘坐的火车刚刚从某一站开出，距离你的目的地还有好几个小时甚至好几天的时候，最聪明的做法当然是享受坐火车的过程——例如去餐车体验一下有着这趟列车的特色的晚饭，或是在车厢里走走看看不同的旅客都在做什么事情，亦或拿起一本书静静地阅读或看着窗外的风景发呆，而不是思考“怎么还有这么远，为什么火车这么慢，会不会晚点，会不会出事故”等完全脱离现实又消耗自己精神能量的问题。</p><p>这一点，是我在 2018 年 8 月于北京开往上海的 1461 次列车上想到的，那次运转或许也是我人生中第一次不以到达为目的的旅行。可惜的是，当时虽然想明白了如此重要的道理，却没有将它纳入自己的逻辑体系中，直到今天，在阅读一本公路旅行相关的书籍时，我才终于回想起了那时的顿悟。</p><h2 id="这个网站的未来？"><a href="#这个网站的未来？" class="headerlink" title="这个网站的未来？"></a>这个网站的未来？</h2><p>谈了这么多现实的事情，是时候仰望一下星空了。</p><p>我将会在这个网站记录与技术有关的一切，但又不会让它完全成为一个技术博客——毕竟这个网站的建站的初衷是个人网站而不是技术博客。我会争取做到技术文章和非技术文章在这个网站上各占一半。除了技术文章之外，读书感悟、轨道交通、咖啡、公路旅行、英语学习、翻译、文化等也会是常见的主题。</p><p>同时，由于我正在学习英语，这个网站上的所有内容也会慢慢变成中文版和英文版共存的状态，以此来作为英文写作和英文语境的练习。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>你以为我会说“苦日子要来了”或者“起风了，唯有努力生存”？那你就完全猜错了。我只是刚刚从一个换乘站登上了列车，而列车也刚刚驶离地铁站，正在前往下一个终点站的路上，而我正享受着窗外的风景和在路上的感觉。不信你看，这个网站的配色不就是从上海地铁 1 号线和 18 号线得到的灵感吗？试着切换一下深色模式和浅色模式吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Be pragmatic and stay humble.&lt;/p&gt;
&lt;p&gt;实事求是，谦虚谨慎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：此文可能引起某些人的不适。若您在阅读中感受到自己的权益受到了侵犯，请及时退出。另外，你当</summary>
      
    
    
    
    <category term="Off topic" scheme="http://site.noellemu.cloud/categories/Off-topic/"/>
    
    
    <category term="Off topic" scheme="http://site.noellemu.cloud/tags/Off-topic/"/>
    
  </entry>
  
  <entry>
    <title>一文看懂 Web 后端开发</title>
    <link href="http://site.noellemu.cloud/f46e6cebc106/"/>
    <id>http://site.noellemu.cloud/f46e6cebc106/</id>
    <published>2022-11-05T05:34:21.000Z</published>
    <updated>2022-11-07T13:50:41.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><p>本文写作于 2021 年 3 月，其中有些信息目前可能已经过时，请注意甄别。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于网络上系统地介绍后端开发的文章实在太少，而最近有恰巧有许多同学问我“什么是后端开发？”、“你为什么喜欢后端开发？”、“做后端都需要学什么？”，那么我们就来讲一讲，到底什么才是后端开发。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>后端开发</strong>（<code>Back-End Development</code>，也称<strong>服务端开发</strong>、<strong>服务器端开发</strong>等）是创建完整可运行的Web应用服务端程序（服务端程序和资源合称为<strong>后端</strong>，即在服务器上运行的、不涉及用户界面的部分）的过程，是Web应用程序开发的一部分。后端开发者使用<code>Java</code>、<code>Golang</code>等语言及其衍生的各种框架、库和解决方案来实现Web应用程序的核心业务逻辑，并向外提供特定的API，使得Web应用能够高效、安全、稳定地运行。</p><h2 id="说人话！"><a href="#说人话！" class="headerlink" title="说人话！"></a>说人话！</h2><p>好吧，如果你看了定义仍然很懵，那我就用一些非常易于理解的表达形式来说一说“什么是后端开发”。虽然这些表述可能并不严谨或完全正确，但是我相信这样一定能使你明白什么是后端开发。</p><p>这里我们拿前端来类比一下，因为我相信绝大多数看到这篇文章的人都已经对“什么是前端开发”、“什么是前端”有一定了解了：</p><ol><li>前端就相当于我们的肉体，后端就相当于我们的灵魂和思想；</li><li>前端是如何操作游戏，后端是具体的游戏规则；</li><li>前端是用户能看到的，后端是用户看不到的；</li><li>前端是跑在浏览器上的，后端是跑在服务器上的；</li><li>前端采集用户的输入，后端处理用户的输入；</li><li>前端开发是写代码给用户看，后端开发是写代码给服务器看。</li></ol><p>是不是这样一讲就明白了？那我们接着往下看。</p><h2 id="具体职责"><a href="#具体职责" class="headerlink" title="具体职责"></a>具体职责</h2><ol><li><strong>实现Web应用程序的实际业务逻辑。</strong>即：实现Web应用程序的具体功能（如注册、发表和查询信息等）或Web应用程序在服务端执行的具体操作。这是后端开发这项工作的主要内容；</li><li><strong>使用API和创建API。</strong>后端需要向前端提供前端所需的数据，也需要使用第三方API来完成业务逻辑（如完成某个功能需要通过API调用其他应用、在使用框架进行开发时需要使用语言和框架的API、操作数据库时需要使用数据库或ORM框架的API等）。因为在后端开发的过程中经常需要与API打交道，所以有人也把后端开发称为“API开发”，就像有些人将前端称为“GUI开发”一样；</li><li><strong>优化。</strong>在用户量达到一定程度后，就会出现诸如响应慢等各种问题（不理解的话想想你们大学的选课系统）；同时，随着代码行数的增多，许多架构上的缺陷可能也会随之暴露出来，如代码逻辑混乱、模块划分不正确等。此时就需要后端开发人员对Web应用程序进行优化，如重构、分布式部署、优化业务逻辑、单体应用拆分成微服务等；</li><li><strong>架构设计。</strong>虽然一般只有高级的后端开发人员和架构师才需要关注架构问题，但是架构设计是后端开发中非常重要的一环，因为它决定了如何组织代码、某个模块负责解决什么样的问题、系统的扩展性和可维护性如何、业务逻辑如何进行组织等，也会一定程度上影响到业务逻辑的具体实现（比如微服务和单体架构这两种架构下，同一种业务逻辑的实现可能完全不同）。</li></ol><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ol><li>后端是工作在服务器上的，负责通过API向前端或其他系统提供其所需的信息（如数据等）；</li><li>后端开发实际上是开发Web应用中对用户不可见的部分（如核心业务逻辑、数据库等），大多数的后端开发都是不涉及用户界面的（除了在前后端不分离的架构中将前端的静态页面通过模板引擎改造成动态页面时）；</li><li>通常情况下，一个Web应用的绝大多数代码都属于后端代码，因为后端承担了Web应用实际的业务逻辑；</li><li>后端开发的压力通常比前端开发要大，因为后端是Web应用的“灵魂”，它影响着Web应用的方方面面，除了业务逻辑之外还需要考虑安全性、稳定性、可维护性、可扩展性、伸缩性等问题。</li></ol><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ol><li><strong>程序设计语言</strong>。许多语言都可以用于后端开发，比较流行的是<code>Java</code>和<code>Go</code>。例如我所使用的就是Go语言，也曾经使用过Java。此外，由于后端开发中经常需要和数据库打交道，所以作为后端开发者，还需要懂<code>SQL</code>语言（如果使用了<code>NoSQL</code>的话，也需要懂<code>NoSQL</code>数据库的语言）；</li><li><strong>数据库</strong>。数据库作为一种简单易用的持久化机制，可以让用户的信息不因为断电等故障而丢失，Web应用开发中经常需要用到数据库，甚至许多简单的Web应用本质上都只是“数据库的可视化系统”，也因为绝大多数简单的业务逻辑本质上都只是对数据库的增删改查（即<code>CRUD</code>）；</li><li><strong>框架、库和解决方案</strong>。想要高效率地开发Web应用，框架、库和解决方案是必不可少的，比如MVC框架、ORM框架、RPC框架、微服务开发框架、云基础设施（如Service Mesh、容器编排工具等）、运行时环境&#x2F;容器（如Docker）、消息队列（Message Queue，MQ）、日志收集和分析工具等；这部分有一些框架是可以跨语言通用的，比如<code>gRPC</code>（RPC框架）、<code>Istio</code>（Service Mesh），也有一些是某种语言专用的，如<code>Spring Cloud</code>（微服务开发工具，JVM技术栈专用）、<code>Gin</code>（MVC框架，Go语言专用）；</li><li><strong>架构和指导思想</strong>。架构是后端开发中非常重要的一部分，作为一名后端开发者需要了解常见的架构，如三层架构、SOA、微服务架构、六边形架构等，还需要了解常用于后端开发中的指导思想，如设计模式、MVC模式、DDD、CQRS&#x2F;ES等；</li><li><strong>包管理工具&#x2F;项目管理工具</strong>。因为后端开发中经常要用到各种框架和库，所以用于管理这些框架和库的管理工具是非常重要的。每一门语言都有自己的包管理工具，如Java的<code>Maven</code>，Go语言的<code>go mod</code>等；</li><li><strong>基础知识</strong>。不管是前端开发还是后端开发，都需要对操作系统、计算机网络、数据结构等基础知识有一定了解，还需要了解对应语言的编码规范、重构等知识，这可以帮助你理解框架和库，也能帮助你写出更高质量的代码；</li><li><strong>开发方法</strong>。实际上这个也可以说是属于指导思想的一部分，包括CI&#x2F;CD、敏捷开发、DevOps等；</li><li><strong>版本管理工具</strong>。相信我，几乎没有人能离开这玩意。最常用的是<code>Git</code>。</li></ol><h2 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h2><p>有不少人其实对后端开发误解很深，以下是一些常见的误解：</p><ol><li>后端开发就是CRUD&#x2F;后端开发太简单了；</li><li>不同系统的后端面临的问题高度相似；</li><li>后端开发很枯燥；</li><li>后端的逻辑比前端复杂；</li><li>对于后端开发者来说，设计业务逻辑是一件很简单的事情；</li><li>后端开发的工作太单一了&#x2F;后端不是一个综合的领域；</li></ol><p>这些误解有时候会劝退一些有意从事后端开发的同学，我们现在就来澄清一下这些误解：</p><ol><li>我不否认很多简单的Web应用确实就是CRUD，但是绝大多数的Web应用都不仅仅是CRUD。至于“太简单了”，能说出这话的人一定没做过后端，或者只做过CRUD，或者是超级大牛。如果不是超级大牛的话，请说这话的人写一个能撑住五万并发的秒杀系统出来，并做压力测试，然后再看看这句话；另外，后端开发是一个非常综合的领域，既有非常抽象的架构和指导思想，又有具体的解决方案和业务逻辑，还涉及到许多计算机底层问题（如多线程、网络、I&#x2F;O等）。并且，虽然后端技术稳定，但也不至于学了点东西就可以到哪里都通吃，例如，如果你没听说过云原生、微服务、Serverless等新技术的话，那说明你已经很久没有跟上后端技术的发展了；以及，如果你现在还在用JSP，那我敢肯定你一定没有意识到诸如前后端分离之类的新问题；</li><li>这个说法也完全不对。不同的系统所面临的具体问题是完全不同的。先不说对一个具体的需求可能有很多种不同的解决方案（如针对单点登录（Single Sign On，SSO）问题就有长连接（虽然我没见过落地案例）、共享Session、JWT等方案），有时候甚至当你拿到一个需求时，可能连要解决什么问题都搞不清楚，这也就是为什么诸如DDD这样的系统分析方法一直备受关注，且重构也经常在各种规模的Web应用中都引起重视，因为用户需求往往不是那么明确，可能会引导我们做出错误的设计；</li><li>记住，<strong>枯燥的是CRUD，而不是后端</strong>。后端开发的技术含量实际上是非常高的，也非常有意思，充满了未知与挑战。像微服务、云原生、DDD、CQRS&#x2F;ES、高并发、负载均衡、缓存、消息队列、多线程、微服务监控、Service Mesh等技术，每一项都值得我们去研究，而这些技术中有很多都是在大型Web应用中被频繁使用的，如果你真正了解后端开发的话，是绝无可能说出“后端开发很枯燥”这样的话的。请记住，并不是不涉及界面的工作就一定很枯燥；</li><li>在大多数的系统中是这样的，但是有些Web应用的前端逻辑复杂程度可能不亚于后端，甚至可能还会超过后端，比如像石墨文档这样的多人协作文档系统，还有ProcessOn这样的在线绘图系统，其前端逻辑可能都是非常复杂的；</li><li>参见2。能说出这话的人一定没重构过一个“大泥球”一样的应用，也没设计过一个用户需求非常模糊的系统（比如用户只给了一条需求：做一个CMS（内容管理系统），你觉得简单你可以来试试，然后用它一个月，如果你不是个有经验的后端开发者的话，我相信你一定会被你自己所写的这个系统逼疯，恨不得将它完全重构）；</li><li>参见1和2。如果后端开发还不综合的话，那什么才是综合的呢？</li></ol><p>我不否认做一个只会CRUD的后端开发者很简单，但既然对后端开发感兴趣，那我们就要有更高的志向，不能把自己框死在CRUD里。</p><p>这里送给各位未来的后端开发者一句话：“<strong>我等采石之人，当心怀大教堂之愿景</strong>”。如果自己一个人完成一个简简单单的CRUD项目，你可以有自己的想法，例如在其中应用DDD和CQRS，或不断地优化它以达到最佳状态；如果迫于工作经验而不得不CRUD，你也可以用业余时间去提升自己的技术，让自己有更光明的未来。</p><h2 id="什么样的人适合做后端？"><a href="#什么样的人适合做后端？" class="headerlink" title="什么样的人适合做后端？"></a>什么样的人适合做后端？</h2><p>说了这么多，那什么样的人才适合做后端开发这份工作呢？</p><ol><li><strong>讨厌写用户界面或与用户界面打交道的人</strong>。有很多人是因为讨厌写界面（尤其是CSS这种反人类的东西）才来做后端开发的。这里没有界面，讨厌与用户界面打交道的人不妨尝试一下后端开发；</li><li><strong>细心的人</strong>。后端开发实际上比前端开发更需要细心。就如前文所述，后端是Web应用程序的“灵魂”，后端开发中的许多问题都决定着Web应用的“生死存亡”，尤其是<strong>数据校验</strong>、<strong>多线程&#x2F;多进程</strong>、<strong>锁</strong>、<strong>异步编程</strong>、<strong>事务&#x2F;分布式事务</strong>、<strong>与第三方系统的交互</strong>等，这些问题有非常非常多的细节，且既复杂又非常重要，一旦在细节上出现问题（如数据校验不完全或加锁解锁的逻辑出现错误），轻则出现错误的数据或业务逻辑不能正常运行，重则直接导致整个Web应用挂掉或出现安全问题（如数据校验不完全导致的文件上传漏洞、函数使用错误导致的远程命令执行漏洞等）。所以如果你想从事后端开发，那足够细心绝对是一个必要的条件；</li><li><strong>喜欢与机器打交道多于与人打交道的人</strong>。与前端开发是“写代码给人看”的不同，后端开发是“写代码给服务器看”（或者说给前端&#x2F;第三方系统看）的。虽然这两个说法都不太严谨，但是后端开发更多的就是与服务器打交道（如降低资源使用率、提高Web应用程序的运行效率等等），而不是与人打交道（如提高页面的美观程度、思考用户的使用逻辑和心理等等）；</li><li><strong>想编写实际的业务逻辑的人，或喜欢算法和逻辑的人</strong>。前端的逻辑更多的是交互逻辑，如点击某个按钮应该弹出什么窗口、怎么把数据渲染成用户想要看到的页面等，而后端的逻辑更多的是实际的业务逻辑，如完成某个功能需要怎样做、请求某个API应该返回什么样的数据等。如果你和我一样写前端时因为总是接触不到实际的业务逻辑而感到不爽，那么大后端欢迎你；</li><li><strong>好奇心强、自学能力强且有终身学习的觉悟的人，或者喜欢钻研技术的人，或喜欢充满挑战性的工作的人</strong>。后端看似简单，实际上技术含量是非常高的。就如前面所说，现在的后端可不仅仅是CRUD，而是随着互联网和云计算技术的发展而不断改变，Web应用程序在需求不断变化的过程中功能变得越来越强，架构变得越来越复杂，对性能的考验也越来越严峻，技术含量自然也就越来越高。作为一名后端开发工程师，需要有不断学习新技术的觉悟，还需要有一定的自学能力，因为不是什么技术都有人教你的，在学习和使用最新技术时对着英文文档啃是常有的事；</li><li><strong>对系统架构感兴趣或想要成为架构师的人</strong>。虽然不可否认的是由于前端至今没有“一统天下”的解决方案而使得前端开发人员经常会比后端开发人员更早地接触到架构的部分，但是传统意义上的前端说白了也就是浏览器那“一亩三分地”（前端同学别喷我，这里仅仅说的是传统的Web前端，“大前端”是不算的哈），而后端技术的天花板则是“地球上人类的数量”（接触过高并发的同学看到这句话应该很有感触吧，哈哈），而核心的业务逻辑往往存在于后端，后端的优化压力往往比前端更大，这就使得初级的后端开发者在进行开发时需要对系统的架构有一定了解、高级的后端开发者需要经常思考系统的架构设计的问题，这也使得后端开发者更容易成长为架构师；</li><li><strong>沉得住气的人</strong>。除了有第5条中提到的“后端的技术含量实际上是非常高的”这一原因之外，还有一个原因就是后端并不是“所见即所得”的，经常需要你编写几十甚至几百行代码、做无数复杂的配置才能把Web应用运行起来（注意，是运行，写业务逻辑的话需要更多代码），另一个原因是后端开发的门槛比前端要高——你至少得掌握一门语言和这门语言在后端开发方面的一些框架或库才能开始开发。所以，后端开发者必须要沉得住气，不能因为写几行代码看不到任何效果就想放弃；</li><li><strong>对系统的基础设施（如框架、库和解决方案等）感兴趣的人</strong>。据我所知，许多在云原生方面有深刻造诣的大佬都是从后端开发者成长起来的，许多框架的作者曾经也是后端开发者。如果你碰巧像我一样对框架、库和解决方案（如<code>Spring Boot</code>、<code>Spring Cloud</code>、<code>Gin</code>、<code>Kubernetes</code>、<code>Istio</code>等）十分感兴趣，那么可以从成为一名后端开发者开始，在编写业务代码的过程中慢慢体会框架的重要性和所用框架的优缺点，以及如何设计一个好的框架。</li></ol><p>虽然你并不需要满足以上每一项才能成为一个后端开发工程师，但是如果你发现你满足上面的某一条或某几条，而且你还没有找到自己的方向，那么不妨来尝试一下后端开发。</p><h2 id="我为什么喜欢后端开发"><a href="#我为什么喜欢后端开发" class="headerlink" title="我为什么喜欢后端开发"></a>我为什么喜欢后端开发</h2><p>先简单介绍以下我的经历吧。我从2019年1月开始接触前端开发，于2019年8月正式转向后端开发，并一直从事后端开发至今。我喜欢后端开发的原因，其实很简单：</p><ol><li>我反感写界面，痛恨GUI编程，每次一写界面我就想遁地。后端开发不需要考虑界面的问题，这里没有界面，只有API；</li><li>我喜欢写实在的业务逻辑，不想总是隔着个API而“任人摆布”，解决实际问题对我来说简直棒极了；</li><li>我喜欢与机器打交道，可以写一天的代码而不感到无聊，但我不喜欢与人打交道，尤其是面对面交谈非技术问题时总会感到不自然（当然，聊技术我能聊一天都不嫌烦）；</li><li>我想要成为一名架构师，想成就优秀的设计，而后端开发能更多地接触到系统的架构和设计；</li><li>接触到后端开发后，我发现我对这一领域内的绝大多数事物都感兴趣，如云原生、DDD、Service Mesh、系统架构等；</li><li>写前端会让我感到痛苦万分，因为我审美诡异、不擅长思考用户的使用逻辑、不擅长编写交互逻辑，写出来的东西又丑又反人类。而当我开始写后端时，我发现我的思考方式经常和真实的业务逻辑出奇地一致，有时候还能在做项目的过程中发现当前所使用的工具的不足，并且思考如何才能设计得更好；</li><li>做后端开发做了一年左右，我越来越感觉到我喜欢这份工作。</li></ol><p>如果你也和我有一样的想法，那么你说不定也非常适合从事后端开发的工作。大后端欢迎你的到来。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>很多人对后端开发的误解源于缺少一篇系统地介绍后端开发的文章。虽然作为一个仅仅入行一年半（截止到2021年3月）的菜鸟，我对后端开发的理解肯定还有许多不足与偏颇，这篇文章也并不那么“系统”，但我仍希望这篇文章能帮助到其他同学了解后端开发或消除对后端开发的误解，抑或找到自己的方向而走上后端开发这条路。</p><p>如果发现文中的错漏之处，欢迎发表评论或联系我进行改正。希望能帮到更多对后端开发感兴趣的同学。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Warning&quot;&gt;&lt;a href=&quot;#Warning&quot; class=&quot;headerlink&quot; title=&quot;Warning&quot;&gt;&lt;/a&gt;Warning&lt;/h2&gt;&lt;p&gt;本文写作于 2021 年 3 月，其中有些信息目前可能已经过时，请注意甄别。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    <category term="Back-end Development" scheme="http://site.noellemu.cloud/categories/Back-end-Development/"/>
    
    
    <category term="Back-end Development" scheme="http://site.noellemu.cloud/tags/Back-end-Development/"/>
    
    <category term="Tutorial" scheme="http://site.noellemu.cloud/tags/Tutorial/"/>
    
  </entry>
  
</feed>
