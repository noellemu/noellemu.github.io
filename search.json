[{"title":"新的个人网站上线了，来聊些杂七杂八的话题吧","url":"/709bf6a98eb1/","content":"\n> Be pragmatic and stay humble.\n> \n> 实事求是，谦虚谨慎。\n\n**注意：此文可能引起某些人的不适。若您在阅读中感受到自己的权益受到了侵犯，请及时退出。另外，你当然有选择抬杠的权利，但你杠就是你对。**\n\n## 新的开始\n\n2022 年 8 月 1 日，我终于签下了人生中第一份劳动合同，这代表着我的人生进入了一个全新的阶段——我终于彻底结束了 4 年压抑得喘不过气的大学生涯，获得了属于自己的自由，4 年来头一次感到自己终于做了一回人。\n\n那么获得自由之后第一件事是什么呢？当然是清理门户，换马甲、换域名、换掉以前的一切……所以就有了现在你们看到的这个网站。\n\n四年前的我如果知道现在的我做的是一份什么样的工作，一定会满腹疑问——毕竟我在跟周围的人说我的工作叫做 SRE 的时候，他们的下一句话不约而同地都是：“SRE 是什么？”，而且彼时的我还对 “Web 安全是一种极其需要天赋的领域，而我却又恰恰没有那种天赋”这个事实一无所知，还妄想着能在安全行业内闯出一番天地。\n\n在被“我做安全是事倍功半的行为”这样的事实教育了之后，我开始寻找新的出路，无意间就接触到了 Java 后端开发。我像是捡到宝了一样，没日没夜地学习 Java、Spring、MySQL 还有各种各样的中间件，不到半年就已经能独立开发一些小型的项目了，也因此获得了人生中第一个实习机会。该说是年少无知还是与其他人跌倒在了同一个地方，我在学习了 Spring Cloud 之后被微服务迷得魂魄出窍，坚信“微服务就是银弹”，于是就开始用 Spring Cloud 开发一个比赛用的项目，还想要部署到 K8s，结果因为 Spring Cloud 这种胖客户端的微服务开发框架与 K8s 天生八字不合，最终也没弄出个所以然来。微服务的优点没感觉到，坑倒是一个不落地踩了个遍，直到现在想起来还是要大喊一句：“微服务把我坑了！”\n\n机缘巧合之下，我了解到了 Service Mesh 和 Istio，也打开了潘多拉的魔盒——云原生 （Cloud Native）。在了解了这种神奇的技术体系之后，我猛然间感到我好像抓住了此生最重要的东西，在了解云原生的过程中也发现 Java 实在是太啰嗦了，不够极简主义，而云原生领域常用的语言 Golang 则更适合我这种极简主义者和实用主义者，于是我果断地抛弃了 Java 并且转向 Golang，用 Golang 完成了很多门课程的实验和大作业，也用 Golang 完成了一个至今仍在运行的外包项目。\n\n但也是在此时，秋招迫在眉睫，我却发现云原生领域的工作如 K8s 开发、Service Mesh 开发等由于专业性太强而几乎完全不校招，于是把目光投向了类似的工作——SRE。在认真了解了 SRE 并拜读了 Google 关于 SRE 的两本著作之后，我发现这其实是一份非常适合我的工作：非常实用主义、成就感强烈、比业务开发更加底层、CRUD 的比重小、符合我个人的技术栈、可以应用新技术……于是我便将 SRE 作为目标岗位之一，最终也成功拿到了 Offer、有了现在的这份工作。\n\n新生活就这样开始了，做着自己最喜欢的工作并能以此谋生，或许是这世界上最幸福的事情之一了吧。\n\n## 关于实用主义\n\n“空谈误国，实干兴邦”，这是我们每个人都无比熟悉的一句话，可是直到现在，我才深刻地体会到这句话的重量。\n\n在耽误了我 4 年时间的那所大学的计算机学院里，实用主义是四等公民，所有的一切都在朝着“实践是技校学生才会去做的事情，我们不能干那种自降身份的事情”、“算法高级，你们所有人都要去做算法”、“做东西就要做炫酷的、没人见过的，对现有事物的改造与优化是愚蠢的行为”这样的方向演进。且不说这些话中饱含着偏见与歧视，对“绝大多数计算机专业的本科毕业生的第一份工作都是软件开发”这样的现状也毫无认知，更透露着一种由愚昧无知带来的傲慢。于是，在这样的大环境下，无数的二极管、键盘侠、人上人一个接一个地涌现出来，明明自己没多少能耐，却总以为自己是世界的中心，殊不知人外有人、山外有山，通用能力和专业能力没怎么培养出来，优越感却已经满级了。连实际工作中每天都会遇到的那些基本的技术问题都回答不出来，却高喊着“学术人高于打工人”，或者以为自己的技术实力世界最强而毫不掩饰对自认为“菜”的那些人的不屑，这样的人 4 年来我遇见了太多太多，对这样的现状也早已习以为常了。\n\n是的，我曾经也是那样的人。我曾经认为自己的技术实力无人能敌，也曾认为培养通用实力是极其耽误时间的事情。但是直到参加工作的那一刻，我才发现通用实力的重要性，也发现脚踏实地的人能在这个绝大多数人都在空谈梦想的时代中获得巨大的红利。说到底，学历不过只是能力的一种罢了，没有学历或许会让一个通用能力十分强大的人错失许多机会，但一个人若只有学历而没有其他任何通用能力，那他在离开象牙塔之后如何在社会上生存都是问题。\n\n对像你我这样的普通人来说，成长其实就是逐步接受现实、接受自己的平凡的过程。小时候，我们每个人都想成为救世主；后来，在成长的过程中，我们渐渐发现连做自己的救世主都很难，更别提改变世界了；最后我们恍然醒悟——人能做到的事情其实很少，我们能做到的对自己最有利的事情就是接受现实、适应现实，然后找到在这种现状下最佳的生存方法。\n\n我曾经也是一名梦想家，整日沉迷于幻想无法自拔，在现实中一遇到什么不如意就立刻逃到幻想的世界中。在现实中我只是沧海中普通得不能再普通的一粟，但在幻想的世界中我却是造物主，掌握着生杀大权，看谁不顺眼就能在幻想的世界中让他永世不得安息。或许你想说“这样不是也挺好的吗”，但是，在上海这座拥有八千多家咖啡馆、有着各种各样的文化、充满了机遇与挑战的城市中的 8 个月（截至本文写作时）的工作和生活经验让我慢慢意识到：幻想除了消耗精神能量外，对自己的生活没有任何好处，它不仅会让你看起来像一个疯癫的傻子、一个另类的自大狂，更会阻碍你去做真正应该做的事情，最终毁掉你的一生。\n\n梦想还是要有的，星空还是要仰望的，可是一步一个脚印地走好脚下的路，才是在这个时代下的我们真正应该做的事情。\n\n所以，成为一名脚踏实地的实用主义者，是我今年最大的愿望。为此，我每天都在与伴随了我 22 年的幻想能力战斗——由于我此前一直用各种各样的借口纵容我的幻想，导致它已经成为了一种我难以控制的本能，与它正面对抗不会有任何好结果，只能通过拼命工作和发展各种各样的爱好（例如读书、数码、咖啡、探店、开源项目、公路旅行、轨道交通等）等方式慢慢夺取它所需要的时间和精神能量等资源并将它饿死。除此之外，别无他法。\n\n因此，我将自己的座右铭定为“Be pragmatic and stay humble”，即“实事求是，谦虚谨慎”，也就是你们在点进这个网站时看到的最醒目的那一句话。同时，我也希望我所写下的文字也能帮到在迷茫中徘徊的你。万事开头难，“说干就干”其实能解决我们遇到的大多数问题。\n\n## 在路上\n\n经常有人认为像我这样的轨道交通迷是一个奇怪的、难以理解的群体。但其实，运转和公路旅行一样，都是一种不以到达某地为目的而是享受“到达”的过程或是“到达”的方式的生活哲学，只不过道路不是公路而是铁路，交通工具不是汽车，而是地铁和火车。\n\n我常常觉得坐在某种交通工具上奔向某个未知的目的地时，总是能想明白很多事情。同样地，在周末坐在路边一家小小的咖啡馆里品味着一杯咖啡时，灵感也总是不断地从脑海中涌现。或许人这一生的某些重大转折点并不是在工作或者学习中产生的，而是偶然间想明白了某些事情或让自己的某些逻辑形成了闭环。\n\n其实人生也是一种像公路旅行或是运转一样在路上前进的过程，区别是我们不知道自己将会去向何处。因此，定下某一阶段的目的地并朝着它前进、享受在路上的过程才是这个过程中最重要的事情。不知道有多少人是想明白了这一点才成为实用主义者的，但我是其中的一员——毕竟，当你乘坐的火车刚刚从某一站开出，距离你的目的地还有好几个小时甚至好几天的时候，最聪明的做法当然是享受坐火车的过程——例如去餐车体验一下有着这趟列车的特色的晚饭，或是在车厢里走走看看不同的旅客都在做什么事情，亦或拿起一本书静静地阅读或看着窗外的风景发呆，而不是思考“怎么还有这么远，为什么火车这么慢，会不会晚点，会不会出事故”等完全脱离现实又消耗自己精神能量的问题。\n\n这一点，是我在 2018 年 8 月于北京开往上海的 1461 次列车上想到的，那次运转或许也是我人生中第一次不以到达为目的的旅行。可惜的是，当时虽然想明白了如此重要的道理，却没有将它纳入自己的逻辑体系中，直到今天，在阅读一本公路旅行相关的书籍时，我才终于回想起了那时的顿悟。\n\n## 这个网站的未来？\n\n谈了这么多现实的事情，是时候仰望一下星空了。\n\n我将会在这个网站记录与技术有关的一切，但又不会让它完全成为一个技术博客——毕竟这个网站的建站的初衷是个人网站而不是技术博客。我会争取做到技术文章和非技术文章在这个网站上各占一半。除了技术文章之外，读书感悟、轨道交通、咖啡、公路旅行、英语学习、翻译、文化等也会是常见的主题。\n\n同时，由于我正在学习英语，这个网站上的所有内容也会慢慢变成中文版和英文版共存的状态，以此来作为英文写作和英文语境的练习。\n\n## 结语\n\n你以为我会说“苦日子要来了”或者“起风了，唯有努力生存”？那你就完全猜错了。我只是刚刚从一个换乘站登上了列车，而列车也刚刚驶离地铁站，正在前往下一个终点站的路上，而我正享受着窗外的风景和在路上的感觉。不信你看，这个网站的配色不就是从上海地铁 1 号线和 18 号线得到的灵感吗？试着切换一下深色模式和浅色模式吧。\n","tags":["Off topic"],"categories":["Off topic"]},{"title":"一文看懂 Web 后端开发","url":"/f46e6cebc106/","content":"\n## Warning\n\n本文写作于 2021 年 3 月，其中有些信息目前可能已经过时，请注意甄别。\n\n## 前言\n\n由于网络上系统地介绍后端开发的文章实在太少，而最近有恰巧有许多同学问我“什么是后端开发？”、“你为什么喜欢后端开发？”、“做后端都需要学什么？”，那么我们就来讲一讲，到底什么才是后端开发。\n\n## 定义\n\n**后端开发**（`Back-End Development`，也称**服务端开发**、**服务器端开发**等）是创建完整可运行的Web应用服务端程序（服务端程序和资源合称为**后端**，即在服务器上运行的、不涉及用户界面的部分）的过程，是Web应用程序开发的一部分。后端开发者使用`Java`、`Golang`等语言及其衍生的各种框架、库和解决方案来实现Web应用程序的核心业务逻辑，并向外提供特定的API，使得Web应用能够高效、安全、稳定地运行。\n\n## 说人话！\n\n好吧，如果你看了定义仍然很懵，那我就用一些非常易于理解的表达形式来说一说“什么是后端开发”。虽然这些表述可能并不严谨或完全正确，但是我相信这样一定能使你明白什么是后端开发。\n\n这里我们拿前端来类比一下，因为我相信绝大多数看到这篇文章的人都已经对“什么是前端开发”、“什么是前端”有一定了解了：\n\n1. 前端就相当于我们的肉体，后端就相当于我们的灵魂和思想；\n2. 前端是如何操作游戏，后端是具体的游戏规则；\n3. 前端是用户能看到的，后端是用户看不到的；\n4. 前端是跑在浏览器上的，后端是跑在服务器上的；\n5. 前端采集用户的输入，后端处理用户的输入；\n6. 前端开发是写代码给用户看，后端开发是写代码给服务器看。\n\n是不是这样一讲就明白了？那我们接着往下看。\n\n## 具体职责\n\n1. **实现Web应用程序的实际业务逻辑。**即：实现Web应用程序的具体功能（如注册、发表和查询信息等）或Web应用程序在服务端执行的具体操作。这是后端开发这项工作的主要内容；\n2. **使用API和创建API。**后端需要向前端提供前端所需的数据，也需要使用第三方API来完成业务逻辑（如完成某个功能需要通过API调用其他应用、在使用框架进行开发时需要使用语言和框架的API、操作数据库时需要使用数据库或ORM框架的API等）。因为在后端开发的过程中经常需要与API打交道，所以有人也把后端开发称为“API开发”，就像有些人将前端称为“GUI开发”一样；\n3. **优化。**在用户量达到一定程度后，就会出现诸如响应慢等各种问题（不理解的话想想你们大学的选课系统）；同时，随着代码行数的增多，许多架构上的缺陷可能也会随之暴露出来，如代码逻辑混乱、模块划分不正确等。此时就需要后端开发人员对Web应用程序进行优化，如重构、分布式部署、优化业务逻辑、单体应用拆分成微服务等；\n4. **架构设计。**虽然一般只有高级的后端开发人员和架构师才需要关注架构问题，但是架构设计是后端开发中非常重要的一环，因为它决定了如何组织代码、某个模块负责解决什么样的问题、系统的扩展性和可维护性如何、业务逻辑如何进行组织等，也会一定程度上影响到业务逻辑的具体实现（比如微服务和单体架构这两种架构下，同一种业务逻辑的实现可能完全不同）。\n\n## 特征\n\n1. 后端是工作在服务器上的，负责通过API向前端或其他系统提供其所需的信息（如数据等）；\n2. 后端开发实际上是开发Web应用中对用户不可见的部分（如核心业务逻辑、数据库等），大多数的后端开发都是不涉及用户界面的（除了在前后端不分离的架构中将前端的静态页面通过模板引擎改造成动态页面时）；\n3. 通常情况下，一个Web应用的绝大多数代码都属于后端代码，因为后端承担了Web应用实际的业务逻辑；\n4. 后端开发的压力通常比前端开发要大，因为后端是Web应用的“灵魂”，它影响着Web应用的方方面面，除了业务逻辑之外还需要考虑安全性、稳定性、可维护性、可扩展性、伸缩性等问题。\n\n## 技术\n\n1. **程序设计语言**。许多语言都可以用于后端开发，比较流行的是`Java`和`Go`。例如我所使用的就是Go语言，也曾经使用过Java。此外，由于后端开发中经常需要和数据库打交道，所以作为后端开发者，还需要懂`SQL`语言（如果使用了`NoSQL`的话，也需要懂`NoSQL`数据库的语言）；\n2. **数据库**。数据库作为一种简单易用的持久化机制，可以让用户的信息不因为断电等故障而丢失，Web应用开发中经常需要用到数据库，甚至许多简单的Web应用本质上都只是“数据库的可视化系统”，也因为绝大多数简单的业务逻辑本质上都只是对数据库的增删改查（即`CRUD`）；\n3. **框架、库和解决方案**。想要高效率地开发Web应用，框架、库和解决方案是必不可少的，比如MVC框架、ORM框架、RPC框架、微服务开发框架、云基础设施（如Service Mesh、容器编排工具等）、运行时环境/容器（如Docker）、消息队列（Message Queue，MQ）、日志收集和分析工具等；这部分有一些框架是可以跨语言通用的，比如`gRPC`（RPC框架）、`Istio`（Service Mesh），也有一些是某种语言专用的，如`Spring Cloud`（微服务开发工具，JVM技术栈专用）、`Gin`（MVC框架，Go语言专用）；\n4. **架构和指导思想**。架构是后端开发中非常重要的一部分，作为一名后端开发者需要了解常见的架构，如三层架构、SOA、微服务架构、六边形架构等，还需要了解常用于后端开发中的指导思想，如设计模式、MVC模式、DDD、CQRS/ES等；\n5. **包管理工具/项目管理工具**。因为后端开发中经常要用到各种框架和库，所以用于管理这些框架和库的管理工具是非常重要的。每一门语言都有自己的包管理工具，如Java的`Maven`，Go语言的`go mod`等；\n6. **基础知识**。不管是前端开发还是后端开发，都需要对操作系统、计算机网络、数据结构等基础知识有一定了解，还需要了解对应语言的编码规范、重构等知识，这可以帮助你理解框架和库，也能帮助你写出更高质量的代码；\n7. **开发方法**。实际上这个也可以说是属于指导思想的一部分，包括CI/CD、敏捷开发、DevOps等；\n8. **版本管理工具**。相信我，几乎没有人能离开这玩意。最常用的是`Git`。\n\n## 误解\n\n有不少人其实对后端开发误解很深，以下是一些常见的误解：\n\n1. 后端开发就是CRUD/后端开发太简单了；\n2. 不同系统的后端面临的问题高度相似；\n3. 后端开发很枯燥；\n4. 后端的逻辑比前端复杂；\n5. 对于后端开发者来说，设计业务逻辑是一件很简单的事情；\n6. 后端开发的工作太单一了/后端不是一个综合的领域；\n\n这些误解有时候会劝退一些有意从事后端开发的同学，我们现在就来澄清一下这些误解：\n\n1. 我不否认很多简单的Web应用确实就是CRUD，但是绝大多数的Web应用都不仅仅是CRUD。至于“太简单了”，能说出这话的人一定没做过后端，或者只做过CRUD，或者是超级大牛。如果不是超级大牛的话，请说这话的人写一个能撑住五万并发的秒杀系统出来，并做压力测试，然后再看看这句话；另外，后端开发是一个非常综合的领域，既有非常抽象的架构和指导思想，又有具体的解决方案和业务逻辑，还涉及到许多计算机底层问题（如多线程、网络、I/O等）。并且，虽然后端技术稳定，但也不至于学了点东西就可以到哪里都通吃，例如，如果你没听说过云原生、微服务、Serverless等新技术的话，那说明你已经很久没有跟上后端技术的发展了；以及，如果你现在还在用JSP，那我敢肯定你一定没有意识到诸如前后端分离之类的新问题；\n2. 这个说法也完全不对。不同的系统所面临的具体问题是完全不同的。先不说对一个具体的需求可能有很多种不同的解决方案（如针对单点登录（Single Sign On，SSO）问题就有长连接（虽然我没见过落地案例）、共享Session、JWT等方案），有时候甚至当你拿到一个需求时，可能连要解决什么问题都搞不清楚，这也就是为什么诸如DDD这样的系统分析方法一直备受关注，且重构也经常在各种规模的Web应用中都引起重视，因为用户需求往往不是那么明确，可能会引导我们做出错误的设计；\n3. 记住，**枯燥的是CRUD，而不是后端**。后端开发的技术含量实际上是非常高的，也非常有意思，充满了未知与挑战。像微服务、云原生、DDD、CQRS/ES、高并发、负载均衡、缓存、消息队列、多线程、微服务监控、Service Mesh等技术，每一项都值得我们去研究，而这些技术中有很多都是在大型Web应用中被频繁使用的，如果你真正了解后端开发的话，是绝无可能说出“后端开发很枯燥”这样的话的。请记住，并不是不涉及界面的工作就一定很枯燥；\n4. 在大多数的系统中是这样的，但是有些Web应用的前端逻辑复杂程度可能不亚于后端，甚至可能还会超过后端，比如像石墨文档这样的多人协作文档系统，还有ProcessOn这样的在线绘图系统，其前端逻辑可能都是非常复杂的；\n5. 参见2。能说出这话的人一定没重构过一个“大泥球”一样的应用，也没设计过一个用户需求非常模糊的系统（比如用户只给了一条需求：做一个CMS（内容管理系统），你觉得简单你可以来试试，然后用它一个月，如果你不是个有经验的后端开发者的话，我相信你一定会被你自己所写的这个系统逼疯，恨不得将它完全重构）；\n6. 参见1和2。如果后端开发还不综合的话，那什么才是综合的呢？\n\n我不否认做一个只会CRUD的后端开发者很简单，但既然对后端开发感兴趣，那我们就要有更高的志向，不能把自己框死在CRUD里。\n\n这里送给各位未来的后端开发者一句话：“**我等采石之人，当心怀大教堂之愿景**”。如果自己一个人完成一个简简单单的CRUD项目，你可以有自己的想法，例如在其中应用DDD和CQRS，或不断地优化它以达到最佳状态；如果迫于工作经验而不得不CRUD，你也可以用业余时间去提升自己的技术，让自己有更光明的未来。\n\n## 什么样的人适合做后端？\n\n说了这么多，那什么样的人才适合做后端开发这份工作呢？\n\n1. **讨厌写用户界面或与用户界面打交道的人**。有很多人是因为讨厌写界面（尤其是CSS这种反人类的东西）才来做后端开发的。这里没有界面，讨厌与用户界面打交道的人不妨尝试一下后端开发；\n2. **细心的人**。后端开发实际上比前端开发更需要细心。就如前文所述，后端是Web应用程序的“灵魂”，后端开发中的许多问题都决定着Web应用的“生死存亡”，尤其是**数据校验**、**多线程/多进程**、**锁**、**异步编程**、**事务/分布式事务**、**与第三方系统的交互**等，这些问题有非常非常多的细节，且既复杂又非常重要，一旦在细节上出现问题（如数据校验不完全或加锁解锁的逻辑出现错误），轻则出现错误的数据或业务逻辑不能正常运行，重则直接导致整个Web应用挂掉或出现安全问题（如数据校验不完全导致的文件上传漏洞、函数使用错误导致的远程命令执行漏洞等）。所以如果你想从事后端开发，那足够细心绝对是一个必要的条件；\n3. **喜欢与机器打交道多于与人打交道的人**。与前端开发是“写代码给人看”的不同，后端开发是“写代码给服务器看”（或者说给前端/第三方系统看）的。虽然这两个说法都不太严谨，但是后端开发更多的就是与服务器打交道（如降低资源使用率、提高Web应用程序的运行效率等等），而不是与人打交道（如提高页面的美观程度、思考用户的使用逻辑和心理等等）；\n4. **想编写实际的业务逻辑的人，或喜欢算法和逻辑的人**。前端的逻辑更多的是交互逻辑，如点击某个按钮应该弹出什么窗口、怎么把数据渲染成用户想要看到的页面等，而后端的逻辑更多的是实际的业务逻辑，如完成某个功能需要怎样做、请求某个API应该返回什么样的数据等。如果你和我一样写前端时因为总是接触不到实际的业务逻辑而感到不爽，那么大后端欢迎你；\n5. **好奇心强、自学能力强且有终身学习的觉悟的人，或者喜欢钻研技术的人，或喜欢充满挑战性的工作的人**。后端看似简单，实际上技术含量是非常高的。就如前面所说，现在的后端可不仅仅是CRUD，而是随着互联网和云计算技术的发展而不断改变，Web应用程序在需求不断变化的过程中功能变得越来越强，架构变得越来越复杂，对性能的考验也越来越严峻，技术含量自然也就越来越高。作为一名后端开发工程师，需要有不断学习新技术的觉悟，还需要有一定的自学能力，因为不是什么技术都有人教你的，在学习和使用最新技术时对着英文文档啃是常有的事；\n6. **对系统架构感兴趣或想要成为架构师的人**。虽然不可否认的是由于前端至今没有“一统天下”的解决方案而使得前端开发人员经常会比后端开发人员更早地接触到架构的部分，但是传统意义上的前端说白了也就是浏览器那“一亩三分地”（前端同学别喷我，这里仅仅说的是传统的Web前端，“大前端”是不算的哈），而后端技术的天花板则是“地球上人类的数量”（接触过高并发的同学看到这句话应该很有感触吧，哈哈），而核心的业务逻辑往往存在于后端，后端的优化压力往往比前端更大，这就使得初级的后端开发者在进行开发时需要对系统的架构有一定了解、高级的后端开发者需要经常思考系统的架构设计的问题，这也使得后端开发者更容易成长为架构师；\n7. **沉得住气的人**。除了有第5条中提到的“后端的技术含量实际上是非常高的”这一原因之外，还有一个原因就是后端并不是“所见即所得”的，经常需要你编写几十甚至几百行代码、做无数复杂的配置才能把Web应用运行起来（注意，是运行，写业务逻辑的话需要更多代码），另一个原因是后端开发的门槛比前端要高——你至少得掌握一门语言和这门语言在后端开发方面的一些框架或库才能开始开发。所以，后端开发者必须要沉得住气，不能因为写几行代码看不到任何效果就想放弃；\n8. **对系统的基础设施（如框架、库和解决方案等）感兴趣的人**。据我所知，许多在云原生方面有深刻造诣的大佬都是从后端开发者成长起来的，许多框架的作者曾经也是后端开发者。如果你碰巧像我一样对框架、库和解决方案（如`Spring Boot`、`Spring Cloud`、`Gin`、`Kubernetes`、`Istio`等）十分感兴趣，那么可以从成为一名后端开发者开始，在编写业务代码的过程中慢慢体会框架的重要性和所用框架的优缺点，以及如何设计一个好的框架。\n\n虽然你并不需要满足以上每一项才能成为一个后端开发工程师，但是如果你发现你满足上面的某一条或某几条，而且你还没有找到自己的方向，那么不妨来尝试一下后端开发。\n\n## 我为什么喜欢后端开发\n\n先简单介绍以下我的经历吧。我从2019年1月开始接触前端开发，于2019年8月正式转向后端开发，并一直从事后端开发至今。我喜欢后端开发的原因，其实很简单：\n\n1. 我反感写界面，痛恨GUI编程，每次一写界面我就想遁地。后端开发不需要考虑界面的问题，这里没有界面，只有API；\n2. 我喜欢写实在的业务逻辑，不想总是隔着个API而“任人摆布”，解决实际问题对我来说简直棒极了；\n3. 我喜欢与机器打交道，可以写一天的代码而不感到无聊，但我不喜欢与人打交道，尤其是面对面交谈非技术问题时总会感到不自然（当然，聊技术我能聊一天都不嫌烦）；\n4. 我想要成为一名架构师，想成就优秀的设计，而后端开发能更多地接触到系统的架构和设计；\n5. 接触到后端开发后，我发现我对这一领域内的绝大多数事物都感兴趣，如云原生、DDD、Service Mesh、系统架构等；\n6. 写前端会让我感到痛苦万分，因为我审美诡异、不擅长思考用户的使用逻辑、不擅长编写交互逻辑，写出来的东西又丑又反人类。而当我开始写后端时，我发现我的思考方式经常和真实的业务逻辑出奇地一致，有时候还能在做项目的过程中发现当前所使用的工具的不足，并且思考如何才能设计得更好；\n7. 做后端开发做了一年左右，我越来越感觉到我喜欢这份工作。\n\n如果你也和我有一样的想法，那么你说不定也非常适合从事后端开发的工作。大后端欢迎你的到来。\n\n## 结语\n\n很多人对后端开发的误解源于缺少一篇系统地介绍后端开发的文章。虽然作为一个仅仅入行一年半（截止到2021年3月）的菜鸟，我对后端开发的理解肯定还有许多不足与偏颇，这篇文章也并不那么“系统”，但我仍希望这篇文章能帮助到其他同学了解后端开发或消除对后端开发的误解，抑或找到自己的方向而走上后端开发这条路。\n\n如果发现文中的错漏之处，欢迎发表评论或联系我进行改正。希望能帮到更多对后端开发感兴趣的同学。\n","tags":["Back-end Development","Tutorial"],"categories":["Back-end Development"]}]